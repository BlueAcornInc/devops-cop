#!/usr/bin/env node

var program = require('commander');
var cop = require('..');
var handy = require('handy');

var doc = "",
    stdIn = process.stdin,
    outputformat;

/**
 * Setup Input and Output
 */
program
    .version('v' + cop.version)
    .option('--yml, --yaml', 'Render as YAML', inputCoercion.bind(null, 'yml'))
    .option('--shell', 'Render as Shell VARS', inputCoercion.bind(null, 'shell'))
    .option('--json', 'Render as JSON', inputCoercion.bind(null, 'json'))
    .option('--xml', 'Render as XML', inputCoercion.bind(null, 'xml'))
    .option('--render-as <format>', 'Render format')
    .option('-t, --render-template [template]', 'Rendering template')
    .option('--stdin-type <format>', 'STDIN format')
    .option('--filter <pattern>', 'Regex pattern to match', collect, [])
    .parse(process.argv)
    .on('--help', function(){

        // output supporte configuration extension support
        helpLoop(cop.supportedExts, " Configuration Extensions:");

        // output supported template extension support
        helpLoop(cop.templateEngines, " Template Engines:");

        console.log('  Examples:');
        console.log('');
        console.log('    $ bin/cop --yml examples/setting.json');
        console.log('    $ bin/cop --yml examples/setting.json examples/setting.yml');
        console.log('    $ bin/cop --render-template examples/views/Dockerfile.hbs examples/setting.json examples/setting.yml');
        console.log('');
    });

if (program.args.length > 0 && !program.stdinType) {
    if (!process.argv.slice(2).length) {
        showHelp();
    }

    // output to stdout
    output(program.args, null, program.renderAs);

} else {
    outputformat = program.renderAs;
    inputformat = program.stdinType;

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    stdIn.on('data', (chunk) => {
        doc += chunk.toString();
    });

    stdIn.on('end', () => {
        // output to stdout
        output(program.args, doc, outputformat, (inputformat ? inputformat : null));
    });

    stdIn.on('error', process.exit);
}

/**
 * Main output method. Determines if from STDIN or input
 * from flag based options from the program itself.
 *
 * @param args - [Array] - program.args
 * @param input - input stream
 *  If STDIN, then input = strem, else input = null
 * @param outputformat - program.renderAs
 * @param inputformat - program.stdinType
 *  If STDIN, then inputformat = program.stdinType, else inputformat = null
 */
function output (args, input, outputformat, inputformat) {
    // convert yml to yaml
    outputformat = (!outputformat || outputformat == 'yml') ? 'yaml' : outputformat;

    // If coming from STDIN
    if(inputformat) {
        let stdInFilePath = cop.saveTmpFile(input, inputformat);

        if(cop.checkStdInType(inputformat) === "template"){
            program.renderTemplate = stdInFilePath;
        } else {
            args.unshift(stdInFilePath);
        }
    }

    // Gather Inputs
    doc = cop.gatherInputs(args, program);

    if (program.renderTemplate || cop.checkStdInType(inputformat) === "template") {
        // asynchronously render templates via errback fn
        cop.render(program.renderTemplate, doc, function (err, out) {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            console.log(out);
        });
    } else {
        doc = cop.gatherInputs(args, program);

        // render merged configuration inputs
        console.log(cop.format[outputformat].stringify(doc));
    }
}

function showHelp() {
    program.outputHelp();
    process.exit(1);
}

function helpLoop(object, title) {
    // Check for if `object` is an "object"
    if(typeof object !== "object") {
        console.error("Current object being used within help is not an object");
        process.exit(1);
        return;
    }

    var exts = Object.keys(object);
    console.log(title || "");
    console.log('');

    for(var i = 0; i < exts.length; i++) {
        console.log('    ' + exts[i] + ' -' + object[exts[i]].map(function(ext){
                return " *." + ext;
            }));
    }

    console.log('');
}

function inputCoercion(val) {
    if(typeof val !== "undefined" && cop.isValidFormat(val)) {
        program.renderAs = val;
    }
}

function collect(val, arr) {
    arr.push(val);
    return arr;
}
