#!/usr/bin/env node

var program = require('commander');
var cop = require('..');
var handy = require('handy');

var doc = "",
    stdIn = process.stdin,
    inputformat, outputformat;

/**
 * Setup Input and Output
 */

program
    .version('v' + cop.version)
    .option('-i, --input <input>', 'Input file')
    .option('-f, --from <format>', 'Test help for input format')
    .option('-t, --to <format>', 'Test help for output format (stdout is used)')
    .parse(process.argv)
    .on('--help', function(){
        console.log('  Examples:');
        console.log('');
        console.log('    $ cat examples/sample.xml | bin/cop --from xml --to json');
        console.log('    $ bin/cop --input examples/sample.xml --to json');
        console.log('');
    });

if (program.input) {
    inputformat = handy.getFileExtension(program.input, 'json');
    outputformat = handy.getFileExtension(program.output, 'json');

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    // output to stdout
    output(true, program.input.toLowerCase(), program.to.toLowerCase());

} else {
    outputformat = program.to;
    inputformat = program.from;

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    stdIn.on('data', (chunk) => {
        doc += chunk.toString();
    });

    stdIn.on('end', () => {
        // output to stdout
        console.log(doc);
        output(false, doc, outputformat, inputformat);
    });

    stdIn.on('readable', () => {
        if(doc.length === 0){
            showHelp();
        }
    });

    stdIn.on('error', process.exit);
}

function output (fileToLoad, input, outputformat, inputformat) {

    // convert yml to yaml
    outputformat = (!outputformat || outputformat == 'yml') ? 'yaml' : outputformat;

    // load appropriate format
    if(fileToLoad) {
        // gather all input streams
        doc = cop.gatherInputs(input);
    } else {
        doc = cop.gatherInputs(input, inputformat);
    }

    console.log(cop.format[outputformat].stringify(doc));
}

function isValidExt(input, inputFormat, outputFormat) {

    if(!cop.isValidFormat(inputFormat) || !cop.isValidFormat(outputFormat)) {
        console.log('*** do not know how to process format : ' + (cop.isValidFormat(inputFormat) ? outputFormat : inputFormat));
        showHelp();
    }
}

function showHelp() {
    program.outputHelp();
    process.exit(1);
}