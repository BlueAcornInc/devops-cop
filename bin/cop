#!/usr/bin/env node
/**
 * to - copyright(c) 2012 openmason.
 * MIT Licensed
 */

var program = require('commander');
var to = require('..');
var handy = require('handy');

var doc = "",
    stdIn = process.stdin,
    inputformat, outputformat;

program
    .version('v' + to.version)
    .option('-i, --input <input>', 'Input file')
    .option('-o, --output <output>', 'Output file')
    .option('-f, --from <format>', 'Test help for input format')
    .option('-t, --to <format>', 'Test help for output format (stdout is used)')
    .parse(process.argv)
    .on('--help', function(){
        console.log('  Examples:');
        console.log('');
        console.log('    $ cat examples/sample.xml | bin/cop -f xml -t json');
        console.log('    $ bin/cop -i examples/sample.xml -o json');
        console.log('');
    });

if (program.input) {
    inputformat = handy.getFileExtension(program.input, 'json');
    outputformat = handy.getFileExtension(program.output, 'json');

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    // validate formats
    isValidExt(inputformat, outputformat);

    // output to stdout
    output(true, program.output, program.input);

} else {
    outputformat = program.to;
    inputformat = program.from;

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    // validate formats
    isValidExt(inputformat, outputformat);

    stdIn.on('data', (chunk) => {
        doc += chunk.toString();
    });

    stdIn.on('end', () => {
        // output to stdout
        output(false, outputformat, doc, inputformat);
    });

    stdIn.on('readable', () => {
        if(doc.length === 0){
            showHelp();
        }
    });

    stdIn.on('error', process.exit);
}

function output (fileToLoad, outputformat, input, inputformat) {

    // convert yml to yaml
    outputformat = (!outputformat || outputformat == 'yml') ? 'yaml' : outputformat;

    // load appropriate format
    if(fileToLoad) {
        doc = to.load(input);
    } else {
        doc = to.load(input, inputformat);
    }

    console.log(to.format[outputformat].stringify(doc));
}

function isValidExt(input, output) {
    if(!to.isValidFormat(input) || !to.isValidFormat(output)) {
        console.log('*** do not know how to process format : ' + (to.isValidFormat(inputformat) ? outputformat :inputformat));
        showHelp();
    }
}

function showHelp() {
    program.outputHelp();
    process.exit(1);
}