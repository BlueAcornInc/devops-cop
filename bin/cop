#!/usr/bin/env node

var program = require('commander');
var cop = require('..');
var handy = require('handy');

var doc = "",
    stdIn = process.stdin,
    outputformat;

/**
 * Setup Input and Output
 */
program
    .version('v' + cop.version)
    .option('--yml, --yaml', 'Render as YAML', inputCoercion.bind(null, 'yml'))
    .option('--json', 'Render as JSON', inputCoercion.bind(null, 'json'))
    .option('--xml', 'Render as XML', inputCoercion.bind(null, 'xml'))
    .option('--render-as <format>', 'Render format')
    .option('-t, --render-template [template]', 'Rendering template')
    .parse(process.argv)
    .on('--help', function(){
        console.log('  Examples:');
        console.log('');
        console.log('    $ bin/cop --yml examples/setting.json');
        console.log('    $ bin/cop --yml examples/setting.json examples/setting.yml');
        console.log('    $ bin/cop --render-template examples/views/Dockerfile.hbs examples/setting.json examples/setting.yml');
        console.log('');
    });

if (program.args.length > 0) {
    if (!process.argv.slice(2).length) {
        showHelp();
    }

    // output to stdout
    output(program.args, program.renderAs);

} else {
    outputformat = program.renderAs;

    if (!process.argv.slice(2).length) {
        showHelp();
    }

    stdIn.on('data', (chunk) => {
        doc += chunk.toString();
    });

    stdIn.on('end', () => {
        // output to stdout
        output(doc, outputformat);
    });

    stdIn.on('readable', () => {
        if(doc.length === 0){
            showHelp();
        }
    });

    stdIn.on('error', process.exit);
}

function output (input, outputformat) {

    // convert yml to yaml
    outputformat = (!outputformat || outputformat == 'yml') ? 'yaml' : outputformat;

    // load appropriate format
    doc = cop.gatherInputs(input);

    if(!program.renderTemplate) {
        console.log(cop.format[outputformat].stringify(doc));
    } else {
        console.log(cop.render(program.renderTemplate, doc));
    }
}

function showHelp() {
    program.outputHelp();
    process.exit(1);
}

function inputCoercion(val) {
    if(typeof val !== "undefined" && cop.isValidFormat(val)) {
        program.renderAs = val;
    }
}